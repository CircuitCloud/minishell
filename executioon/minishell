# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    minishell                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: cahaik <cahaik@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/08/19 14:57:53 by cahaik            #+#    #+#              #
#    Updated: 2024/11/07 03:49:55 by cahaik           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#ifndef MINISHELL_H
# define MINISHELL_H

# ifndef INPUT_RED
#  define INPUT_RED 1
# endif 

# ifndef OUTPUT_RED
#  define OUTPUT_RED 2
# endif 

# ifndef APPEND_RED
#  define APPEND_RED 3
# endif 

# ifndef HERE_DOC
#  define HERE_DOC 4
# endif

# include <unistd.h>
# include <stdlib.h>
# include <stdio.h>
# include <fcntl.h>
# include <signal.h>
# include <readline/readline.h>
# include <readline/history.h>

typedef struct s_status
{
	int exit_status;
	int check_redir;
}	t_status;

typedef struct s_redirection
{
	int						type; 
	char					*file;
	char					*delimiter;
	int						fd;
	struct s_redirection	*next_redir;
}	t_redirection;

typedef struct s_ev
{
	char		*line;
	char		*name;
	char		*value;
	struct s_ev	*next;
	struct s_ev	*previous;
}	t_ev;

typedef struct s_command
{
	char				*cmnd;
	t_ev				*ev;
	char				**args;
	t_redirection		*redir;
	struct s_command	*left;
	struct s_command	*right;
}	t_command;

typedef struct s_pipe
{
	t_command	*cmnd1;
	t_command	*cmnd2;
}	t_pipe;

extern int gqq_signal;

int				valide_var(char *arg);
int				search(char **cmd,t_ev *ev);
int				ft_strcmp(char *dest, char *src);
int				create_struct(char *env, t_ev **ev);
int				search_bin(char **cmd, char *p);
int				_spaces(char *str, int *sign, int *i, int func);
int				in_redir(t_redirection *root_redir, t_status **p);
int				out_redir(t_redirection *root_redir, t_status **p);
int				append_redir(t_redirection *root_redir, t_status **p);
int				ft_strncmp(const char *dest, const char *src, size_t n);
void			heredocc();
void			signals(int c);
void			pwd_(t_ev *ev);
void			env_(t_ev *ev, t_status *p);
void			exit_(char **arg, t_status *p);
void			echo_(char **arg, t_status *p);
void			unset_helper(t_ev **ev, char *name);
void			cd_(t_ev **ev, char *arg, t_status *p);
void			execution(t_command *root,t_status *p);
void			redirection(t_command *root, t_status **p);
void			ft_lstadd_back_env(t_ev **lst, t_ev *new);
void			out_redirect(t_redirection *root_redir, t_status* *p);
void			execute_pipe(t_command *root, t_status **p);
void			unset_(t_ev **ev, char **name, t_status *p);
void			input_redirect(t_redirection *root_redir, t_status **p);
void			export_(char **args, t_ev **ev, t_status *p);
void			execute_program(t_command *root, t_status **p);
void			value_helper(char **value, char *arg, char c);
void			exit_many_args(t_status *p, int err, char *arg);
void			print_error(char *err, int type, t_status **p, int exit_s);
t_ev			*environ(char **env);
t_ev			*ft_lstlast_env(t_ev *lst);
t_ev			*ft_lst_new_env(char *line, char *name, char *value);
long long		atoi_exit(char *str, int *err);

#endif